version: "2.1"

services:
  # The opentelemetry-collector batches and processes traces sent to it.
  opentelemetry-collector:
    image: otel/opentelemetry-collector-contrib
    ports:
      - "12347:12345"
      - "12348:12348"
      - "6832:6832"
      - "55679:55679"
      - "4318:4318"
    volumes:
      - ./otel/otel.yml:/etc/otel-collector-config.yml
    command: ["--config=/etc/otel-collector-config.yml"]
    environment:
      - BASIC_AUTH_USERNAME=${BASIC_AUTH_USERNAME}
      - BASIC_AUTH_PASSWORD=${BASIC_AUTH_PASSWORD}

  # Grafana agent batches and processes traces sent to it, generating
  # auto-logs from those traces.
  # agent:
  #   image: grafana/agent:v0.38.0
  #   ports:
  #     - "12347:12345"
  #     - "12348:12348"
  #     - "6832:6832"
  #     - "55679:55679"
  #     - "4318:4318"
  #   volumes:
  #     # To run using a Static configuration instead, uncomment out the following line.
  #     # - "./agent/config.yaml:/etc/agent/agent.yaml"
  #     # To run using a Static configuration instead, comment the following line.
  #     - "./agent/config.river:/etc/agent/config.river"
  #   # To run using a Static configuration instead, uncomment out the following block.
  #   #command: [
  #   #  "-config.file=/etc/agent/agent.yaml",
  #   #  "-server.http.address=0.0.0.0:12345",
  #   #]
  #   # To run using a Static configuration instead, comment the following `environment` and
  #   # `command` blocks.
  #   environment:
  #     - AGENT_MODE=flow
  #   command:
  #     [
  #       "run",
  #       "--server.http.listen-addr=0.0.0.0:12345",
  #       "/etc/agent/config.river",
  #     ]

  # The Grafana dashboarding server.
  grafana:
    image: grafana/grafana:10.2.3
    volumes:
      # - "./grafana/grafana-storage:/var/lib/grafana"
      - "./grafana/provisioning:/etc/grafana/provisioning"
      - "./grafana/grafana.ini:/etc/grafana/grafana.ini"
      - "./grafana/grafana:/var/lib/grafana"
    ports:
      - "80:80"
    environment:
      - GF_FEATURE_TOGGLES_ENABLE=flameGraph traceqlSearch traceQLStreaming correlations metricsSummary traceqlEditor
      - GF_USERNAME=${GF_USERNAME}
      - GF_PASSWORD=${GF_PASSWORD}
      # - GF_AUTH_ANONYMOUS_ENABLED=true
      # - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      # - GF_AUTH_DISABLE_LOGIN_FORM=true

  # The Tempo service stores traces send to it by Grafana Agent, and takes
  # queries from Grafana to visualise those traces.
  tempo:
    image: grafana/tempo:2.3.0
    ports:
      - "3200:3200"
      - "4317:4317"
      - "9411:9411"
      - "55680:55680"
      - "55681:55681"
      - "14250:14250"
    command: ["-config.file=/etc/tempo.yaml", "-config.expand-env=true"]
    volumes:
      - "./tempo/tempo.yaml:/etc/tempo.yaml"
    environment:
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - S3_ENDPOINT=${S3_ENDPOINT}

  # The Loki service stores logs sent to it, and takes queries from Grafana
  # to visualise those logs.
  loki:
    image: grafana/loki:latest
    # image: grafana/loki-canary
    ports:
      - "3100:3100"
    command:
      ["-config.file=/etc/loki/local-config.yaml", "-config.expand-env=true"]
    volumes:
      - "./loki/local-config.yaml:/etc/loki/local-config.yaml"
    environment:
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - S3_ENDPOINT=${S3_ENDPOINT}

  mimir:
    image: grafana/mimir:2.10.4
    command:
      [
        "-ingester.native-histograms-ingestion-enabled=true",
        "-config.file=/etc/mimir.yaml",
        "-config.expand-env=true",
      ]
    ports:
      - "9009:9009"
    volumes:
      - "./mimir/mimir.yaml:/etc/mimir.yaml"
    environment:
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - S3_ENDPOINT=${S3_ENDPOINT}

  # k6:
  #   image: grafana/k6
  #   volumes:
  #     - "./k6:/scripts"
  #   environment:
  #     - K6_PROMETHEUS_RW_SERVER_URL=http://mimir:9009/api/v1/push
  #     - K6_DURATION=3600s
  #     - K6_VUS=4
  #     - K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM=true
  #   restart: always
  #   command:
  #     [
  #       "run",
  #       "-o",
  #       "experimental-prometheus-rw",
  #       "/scripts/mythical-loadtest.js",
  #     ]

  # pyroscope:
  #   image: grafana/pyroscope:1.2.0
  #   ports:
  #     - "4040:4040"
  #   command: ["server"]

  # beyla-requester:
  #   image: grafana/beyla:latest
  #   # Beyla requires to be run in the same process namespace as the process it's watching.
  #   # In Docker, we can do this by joining the namespace for the watched process with the Beyla
  #   # container watching it by using a specific `pid` label.
  #   pid: "service:mythical-requester"
  #   # Beyla requires the SYS_ADMIN capability to run, to add hooks to the underlying kernel.
  #   # Note that you should *always* be aware of the security implications of adding capabilities
  #   # before you do so.
  #   cap_add:
  #     - SYS_ADMIN
  #   # If using the above capability fails to instrument your service, remove it and uncomment the
  #   # line below. Beware that this will allow Beyla to run with full privileges, which may be
  #   # undesirable.
  #   #privileged: true
  #   command:
  #     - /beyla
  #     - --config=/configs/config.yaml
  #   volumes:
  #     - ./beyla/:/configs
  #   # See the full list of configuration options at
  #   # https://grafana.com/docs/grafana-cloud/monitor-applications/beyla/configure/options/ for more details on the
  #   # options set below.
  #   environment:
  #     BEYLA_OPEN_PORT: "4001"                                   # Instrument any service listening on port 4001.
  #     BEYLA_SERVICE_NAMESPACE: "mythical"                       # The namespace for the service.
  #     BEYLA_PROMETHEUS_PORT: "9090"                             # The port to expose Prometheus metrics on.
  #     #BEYLA_BPF_TRACK_REQUEST_HEADERS: "true"
  #     OTEL_SERVICE_NAME: "beyla-mythical-requester"             # The service name to use for OpenTelemetry traces.
  #     OTEL_EXPORTER_OTLP_TRACES_INSECURE: true                  # Whether to use an insecure connection to Grafana Agent.
  #     OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"                       # The protocol to use to send traces to Grafana Agent.
  #     OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://agent:4317/"  # The endpoint to send traces to.
  #   # The `depends_on` block below ensures that the mythical-requester service is started before Beyla.
  #   depends_on:
  #     mythical-requester:
  #       condition: service_started

  # beyla-server:
  #   image: grafana/beyla:latest
  #   # Beyla requires to be run in the same process namespace as the process it's watching.
  #   # In Docker, we can do this by joining the namespace for the watched process with the Beyla
  #   # container watching it by using a specific `pid` label.
  #   pid: "service:mythical-server"
  #   # Beyla requires the SYS_ADMIN capability to run, to add hooks to the underlying kernel.
  #   # Note that you should *always* be aware of the security implications of adding capabilities
  #   # before you do so.
  #   cap_add:
  #     - SYS_ADMIN
  #   # If using the above capability fails to instrument your service, remove it and uncomment the
  #   # line below. Beware that this will allow Beyla to run with full privileges, which may be
  #   # undesirable.
  #   #privileged: true
  #   command:
  #     - /beyla
  #     - --config=/configs/config.yaml
  #   volumes:
  #     - ./beyla/:/configs
  #   # See the full list of configuration options at
  #   # https://grafana.com/docs/grafana-cloud/monitor-applications/beyla/configure/options/ for more details on the
  #   # options set below.
  #   environment:
  #     BEYLA_OPEN_PORT: "4000"                                   # Instrument any service listening on port 4001.
  #     BEYLA_SERVICE_NAMESPACE: "mythical"                       # The namespace for the service.
  #     BEYLA_PROMETHEUS_PORT: "9090"                             # The port to expose Prometheus metrics on.
  #     #BEYLA_BPF_TRACK_REQUEST_HEADERS: "true"
  #     OTEL_SERVICE_NAME: "beyla-mythical-server"                # The service name to use for OpenTelemetry traces.
  #     OTEL_EXPORTER_OTLP_TRACES_INSECURE: true                  # Whether to use an insecure connection to Grafana Agent.
  #     OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"                       # The protocol to use to send traces to Grafana Agent.
  #     OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://agent:4317/"  # The endpoint to send traces to.
  #   # The `depends_on` block below ensures that the mythical-server service is started before Beyla.
  #   depends_on:
  #     mythical-server:
  #       condition: service_started

  # beyla-recorder:
  #   image: grafana/beyla:latest
  #   # Beyla requires to be run in the same process namespace as the process it's watching.
  #   # In Docker, we can do this by joining the namespace for the watched process with the Beyla
  #   # container watching it by using a specific `pid` label.
  #   pid: "service:mythical-recorder"
  #   # Beyla requires the SYS_ADMIN capability to run, to add hooks to the underlying kernel.
  #   # Note that you should *always* be aware of the security implications of adding capabilities
  #   # before you do so.
  #   cap_add:
  #     - SYS_ADMIN
  #   # If using the above capability fails to instrument your service, remove it and uncomment the
  #   # line below. Beware that this will allow Beyla to run with full privileges, which may be
  #   # undesirable.
  #   #privileged: true
  #   command:
  #     - /beyla
  #     - --config=/configs/config.yaml
  #   volumes:
  #     - ./beyla/:/configs
  #   # See the full list of configuration options at
  #   # https://grafana.com/docs/grafana-cloud/monitor-applications/beyla/configure/options/ for more details on the
  #   # options set below.
  #   environment:
  #     BEYLA_OPEN_PORT: "4002"                                   # Instrument any service listening on port 4001.
  #     BEYLA_SERVICE_NAMESPACE: "mythical"                       # The namespace for the service.
  #     BEYLA_PROMETHEUS_PORT: "9090"                             # The port to expose Prometheus metrics on.
  #     #BEYLA_BPF_TRACK_REQUEST_HEADERS: "true"
  #     OTEL_SERVICE_NAME: "beyla-mythical-recorder"              # The service name to use for OpenTelemetry traces.
  #     OTEL_EXPORTER_OTLP_TRACES_INSECURE: true                  # Whether to use an insecure connection to Grafana Agent.
  #     OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"                       # The protocol to use to send traces to Grafana Agent.
  #     OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://agent:4317/"  # The endpoint to send traces to.
  #   # The `depends_on` block below ensures that the mythical-recorder service is started before Beyla.
  #   depends_on:
  #     mythical-recorder:
  #       condition: service_started
